#include "Liste.deca"

{
	/* Liste ap = new Liste(0.000000000000001, aq, 0.000000000000001);
	Liste ao = new Liste(0.00000000000001, ap, 0.00000000000001);
	Liste an = new Liste(0.0000000000001, ao, 0.0000000000001);
	Liste am = new Liste(0.000000000001, an, 0.000000000001);
	Liste al = new Liste(0.00000000001, am, 0.00000000001);
	Liste ak = new Liste(0.0000000001, al, 0.0000000001);
	Liste aj = new Liste(0.000000001, ak, 0.000000001);
	Liste ai = new Liste(0.00000001, aj, 0.00000001);
	Liste ah = new Liste(0.0000001, ai, 0.0000001);
	Liste ag = new Liste(0.0000009999999, ah, 0.000001);
	Liste af = new Liste(0.000009999999, ag, 0.00001);
	Liste ae = new Liste(0.00009999999, af, 0.0001);
	Liste ad = new Liste(0.0009999996, ae, 0.001);
	Liste ac = new Liste(0.0099996666, ad, 0.01);
	Liste ab = new Liste(0.0996686525, ac, 0.1);
	Liste aa = new Liste(0.78539816339, ab, 1);
	Liste curr = aa; */

	float angle;
	float pi;

Liste a0;
Liste a1;
Liste a2;
Liste a3;
Liste a4;
Liste a5;
Liste a6;
Liste a7;
Liste a8;
Liste a9;
Liste a10;
Liste a11;
Liste a12;
Liste a13;
Liste a14;
Liste a15;
Liste a16;
Liste a17;
Liste a18;
Liste a19;
Liste a20;
Liste a21;
Liste a22;
Liste a23;
Liste a24;
Liste a25;
Liste a26;
Liste a27;
Liste a28;
Liste a29;
Liste a30;
Liste a31;
Liste a32;
Liste a33;
Liste a34;
Liste a35;
Liste a36;
Liste a37;
Liste a38;
Liste a39;
Liste a40;
Liste a41;
Liste a42;
Liste a43;
Liste a44;
Liste a45;
Liste a46;
Liste a47;
Liste a48;
Liste a49;
	
	Liste curr;
	float res;
	float X;
	float Y;
	float epsilon;
	int oppose;
	float petit_tan;
	float pre_resultat;
	float resultat;

a0 = new Liste();
a1 = new Liste();
a2 = new Liste();
a3 = new Liste();
a4 = new Liste();
a5 = new Liste();
a6 = new Liste();
a7 = new Liste();
a8 = new Liste();
a9 = new Liste();
a10 = new Liste();
a11 = new Liste();
a12 = new Liste();
a13 = new Liste();
a14 = new Liste();
a15 = new Liste();
a16 = new Liste();
a17 = new Liste();
a18 = new Liste();
a19 = new Liste();
a20 = new Liste();
a21 = new Liste();
a22 = new Liste();
a23 = new Liste();
a24 = new Liste();
a25 = new Liste();
a26 = new Liste();
a27 = new Liste();
a28 = new Liste();
a29 = new Liste();
a30 = new Liste();
a31 = new Liste();
a32 = new Liste();
a33 = new Liste();
a34 = new Liste();
a35 = new Liste();
a36 = new Liste();
a37 = new Liste();
a38 = new Liste();
a39 = new Liste();
a40 = new Liste();
a41 = new Liste();
a42 = new Liste();
a43 = new Liste();
a44 = new Liste();
a45 = new Liste();
a46 = new Liste();
a47 = new Liste();
a48 = new Liste();
a49 = new Liste();

a49.init(1.0e-49, null, 1.0e-49);
a48.init(1.0e-48, a49, 1.0e-48);
a47.init(1.0e-47, a48, 1.0e-47);
a46.init(1.0e-46, a47, 1.0e-46);
a45.init(1.0e-45, a46, 1.0e-45);
a44.init(1.0e-44, a45, 1.0e-44);
a43.init(1.0e-43, a44, 1.0e-43);
a42.init(1.0e-42, a43, 1.0e-42);
a41.init(1.0e-41, a42, 1.0e-41);
a40.init(1.0e-40, a41, 1.0e-40);
a39.init(1.0e-39, a40, 1.0e-39);
a38.init(1.0e-38, a39, 1.0e-38);
a37.init(1.0e-37, a38, 1.0e-37);
a36.init(1.0e-36, a37, 1.0e-36);
a35.init(1.0e-35, a36, 1.0e-35);
a34.init(1.0e-34, a35, 1.0e-34);
a33.init(1.0e-33, a34, 1.0e-33);
a32.init(1.0e-32, a33, 1.0e-32);
a31.init(1.0e-31, a32, 1.0e-31);
a30.init(1.0e-30, a31, 1.0e-30);
a29.init(1.0e-29, a30, 1.0e-29);
a28.init(1.0e-28, a29, 1.0e-28);
a27.init(1.0e-27, a28, 1.0e-27);
a26.init(1.0e-26, a27, 1.0e-26);
a25.init(1.0e-25, a26, 1.0e-25);
a24.init(1.0e-24, a25, 1.0e-24);
a23.init(1.0e-23, a24, 1.0e-23);
a22.init(1.0e-22, a23, 1.0e-22);
a21.init(1.0e-21, a22, 1.0e-21);
a20.init(1.0e-20, a21, 1.0e-20);
a19.init(1.0e-19, a20, 1.0e-19);
a18.init(1.0e-18, a19, 1.0e-18);
a17.init(1.0e-17, a18, 1.0e-17);
a16.init(1.0e-16, a17, 1.0e-16);
a15.init(1.0e-15, a16, 1.0e-15);
a14.init(1.0e-14, a15, 1.0e-14);
a13.init(1.0e-13, a14, 1.0e-13);
a12.init(1.0e-12, a13, 1.0e-12);
a11.init(1.0e-11, a12, 1.0e-11);
a10.init(1.0e-10, a11, 1.0e-10);
a9.init(1.0e-09, a10, 1.0e-09);
a8.init(1.0e-08, a9, 1.0e-08);
a7.init(9.999999999999966e-08, a8, 1.0e-07);
a6.init(9.999999999996666e-07, a7, 1.0e-06);
a5.init(9.999999999666668e-06, a6, 1.0e-05);
a4.init(9.999999966666667e-05, a5, 0.0001);
a3.init(0.0009999996666668668, a4, 0.001);
a2.init(0.009999666686665238, a3, 0.01);
a1.init(0.09966865249116204, a2, 0.1);
a0.init(0.7853981633974483, a1, 1.0);
	
	curr=a0;
	angle = 1.047197551; /* l'angle en argument */
	pi = 3.141592653589793238;


	epsilon = 0.0000000000000001;
	oppose = 1;

	if(angle < -pi){
		while(angle < -pi){
			angle = angle + (2 * pi);
		}
	}
	if(angle > pi){
		while(angle > pi) {
			angle = angle - (2 * pi);
		}
	}
	/* angle est dÃ©sormais dans [-pi, pi] */
	if(-(pi / 2) < angle && angle < 0){
		angle = -angle;
	    oppose = -1;
	}
	else if(-pi < angle && angle < -(pi / 2)){
		angle = angle + pi;
	    oppose = -1;
	}
	else if(angle < pi && (pi / 2) < angle){
		angle = pi - angle;
	    oppose = 1;
	}
	else{
		oppose = 1;
	}
	angle = angle / 2;
	X = 1;
	Y = 0;
	epsilon = 0.1; /* 10**-2 */
    while(angle >= epsilon) {

        while(angle < curr.contenu){
            curr = curr.suivant;
        }
        res = X;
        X = X - (curr.valeur_k * Y);
        Y = Y + (curr.valeur_k * res);
        angle = angle - curr.contenu;
    }
    petit_tan = Y / X;
    pre_resultat = (2 * petit_tan) / (1 + ((petit_tan) * (petit_tan)));
    resultat = oppose * pre_resultat;
    println(resultat);
}
