#include "Liste.deca"
{
/*    Liste aq = new Liste((float)0.00001525878906, null, (float)0.00001525878906);
    Liste ap = new Liste((float)0.00003051757812, aq, (float)0.00003051757813);
    Liste ao = new Liste((float)0.00006103515617, ap, (float)0.00006103515625);
    Liste an = new Liste((float)0.0001220703119, ao, (float)0.0001220703125);
    Liste am = new Liste((float)0.0002441406201, an, (float)0.000244140625);
    Liste al = new Liste((float)0.0004882812112, am, (float)0.00048828125);
    Liste ak = new Liste((float)0.0009765621896, al, (float)0.0009765625);
    Liste aj = new Liste((float)0.001953122516, ak, (float)0.001953125);
    Liste ai = new Liste((float)0.003906230132, aj, (float)0.00390625);
    Liste ah = new Liste((float)0.00781234106, ai, (float)0.0078125);
    Liste ag = new Liste((float)0.01562372862, ah, (float)0.015625);
    Liste af = new Liste((float)0.03123983343, ag, (float)0.03125);
    Liste ae = new Liste((float)0.06241881, af, (float)0.0625);
    Liste ad = new Liste((float)0.1243549945, ae, (float)0.125);
    Liste ac = new Liste((float)0.2449786631, ad, (float)0.25);
    Liste ab = new Liste((float)0.463647609, ac, (float)0.5);
    Liste aa = new Liste((float)0.78539816339, ab, (float)1);
    Liste aaa = new Liste((float)1, aa, (float)1);*/

    float nombre;
    int signe;
    int signe2;
    float res;
    float X;
    float Y;
    float angle_ajoute;
    float epsilon;
    float pi;
    float grosse_somme;

    	Liste a0;
		Liste a1;
		Liste a2;
		Liste a3;
		Liste a4;
		Liste a5;
		Liste a6;
		Liste a7;
		Liste a8;
		Liste a9;
		Liste a10;
		Liste a11;
		Liste a12;
		Liste a13;
		Liste a14;
		Liste a15;
		Liste a16;
		Liste a17;
		Liste a18;
		Liste a19;
		Liste a20;
		Liste a21;
		Liste a22;
		Liste a23;
		Liste a24;
		Liste a25;
		Liste a26;
		Liste a27;
		Liste a28;
		Liste a29;
		Liste a30;
		Liste a31;
		Liste a32;
		Liste a33;
		Liste a34;
		Liste a35;
		Liste a36;
		Liste a37;
		Liste a38;
		Liste a39;
		Liste a40;
		Liste a41;
		Liste a42;
		Liste a43;
		Liste a44;
		Liste a45;
		Liste a46;
		Liste a47;
		Liste a48;
		Liste a49;
		Liste a50;
		Liste a51;
		Liste a52;
		Liste a53;
		Liste a54;
		Liste a55;
		Liste a56;
		Liste a57;
		Liste a58;
		Liste a59;
		a0 = new Liste();
		a1 = new Liste();
		a2 = new Liste();
		a3 = new Liste();
		a4 = new Liste();
		a5 = new Liste();
		a6 = new Liste();
		a7 = new Liste();
		a8 = new Liste();
		a9 = new Liste();
		a10 = new Liste();
		a11 = new Liste();
		a12 = new Liste();
		a13 = new Liste();
		a14 = new Liste();
		a15 = new Liste();
		a16 = new Liste();
		a17 = new Liste();
		a18 = new Liste();
		a19 = new Liste();
		a20 = new Liste();
		a21 = new Liste();
		a22 = new Liste();
		a23 = new Liste();
		a24 = new Liste();
		a25 = new Liste();
		a26 = new Liste();
		a27 = new Liste();
		a28 = new Liste();
		a29 = new Liste();
		a30 = new Liste();
		a31 = new Liste();
		a32 = new Liste();
		a33 = new Liste();
		a34 = new Liste();
		a35 = new Liste();
		a36 = new Liste();
		a37 = new Liste();
		a38 = new Liste();
		a39 = new Liste();
		a40 = new Liste();
		a41 = new Liste();
		a42 = new Liste();
		a43 = new Liste();
		a44 = new Liste();
		a45 = new Liste();
		a46 = new Liste();
		a47 = new Liste();
		a48 = new Liste();
		a49 = new Liste();
		a50 = new Liste();
		a51 = new Liste();
		a52 = new Liste();
		a53 = new Liste();
		a54 = new Liste();
		a55 = new Liste();
		a56 = new Liste();
		a57 = new Liste();
		a58 = new Liste();
		a59 = new Liste();
		a59.init(1.734723475976807e-18, null, 1.734723475976807e-18);
		a58.init(3.469446951953614e-18, a59, 3.469446951953614e-18);
		a57.init(6.938893903907228e-18, a58, 6.938893903907228e-18);
		a56.init(1.3877787807814457e-17, a57, 1.3877787807814457e-17);
		a55.init(2.7755575615628914e-17, a56, 2.7755575615628914e-17);
		a54.init(5.551115123125783e-17, a55, 5.551115123125783e-17);
		a53.init(1.1102230246251565e-16, a54, 1.1102230246251565e-16);
		a52.init(2.220446049250313e-16, a53, 2.220446049250313e-16);
		a51.init(4.440892098500626e-16, a52, 4.440892098500626e-16);
		a50.init(8.881784197001252e-16, a51, 8.881784197001252e-16);
		a49.init(1.7763568394002505e-15, a50, 1.7763568394002505e-15);
		a48.init(3.552713678800501e-15, a49, 3.552713678800501e-15);
		a47.init(7.105427357601002e-15, a48, 7.105427357601002e-15);
		a46.init(1.4210854715202004e-14, a47, 1.4210854715202004e-14);
		a45.init(2.842170943040401e-14, a46, 2.842170943040401e-14);
		a44.init(5.684341886080802e-14, a45, 5.684341886080802e-14);
		a43.init(1.1368683772161603e-13, a44, 1.1368683772161603e-13);
		a42.init(2.2737367544323206e-13, a43, 2.2737367544323206e-13);
		a41.init(4.547473508864641e-13, a42, 4.547473508864641e-13);
		a40.init(9.094947017729282e-13, a41, 9.094947017729282e-13);
		a39.init(1.8189894035458565e-12, a40, 1.8189894035458565e-12);
		a38.init(3.637978807091713e-12, a39, 3.637978807091713e-12);
		a37.init(7.275957614183426e-12, a38, 7.275957614183426e-12);
		a36.init(1.4551915228366852e-11, a37, 1.4551915228366852e-11);
		a35.init(2.9103830456733704e-11, a36, 2.9103830456733704e-11);
		a34.init(5.820766091346741e-11, a35, 5.820766091346741e-11);
		a33.init(1.1641532182693481e-10, a34, 1.1641532182693481e-10);
		a32.init(2.3283064365386963e-10, a33, 2.3283064365386963e-10);
		a31.init(4.656612873077393e-10, a32, 4.656612873077393e-10);
		a30.init(9.313225746154785e-10, a31, 9.313225746154785e-10);
		a29.init(1.862645149230957e-09, a30, 1.862645149230957e-09);
		a28.init(3.725290298461914e-09, a29, 3.725290298461914e-09);
		a27.init(7.450580596923828e-09, a28, 7.450580596923828e-09);
		a26.init(1.4901161193847655e-08, a27, 1.4901161193847656e-08);
		a25.init(2.9802322387695303e-08, a26, 2.9802322387695312e-08);
		a24.init(5.960464477539055e-08, a25, 5.960464477539063e-08);
		a23.init(1.1920928955078068e-07, a24, 1.1920928955078125e-07);
		a22.init(2.3841857910155797e-07, a23, 2.384185791015625e-07);
		a21.init(4.7683715820308884e-07, a22, 4.76837158203125e-07);
		a20.init(9.536743164059608e-07, a21, 9.5367431640625e-07);
		a19.init(1.907348632810187e-06, a20, 1.9073486328125e-06);
		a18.init(3.814697265606496e-06, a19, 3.814697265625e-06);
		a17.init(7.62939453110197e-06, a18, 7.62939453125e-06);
		a16.init(1.5258789061315762e-05, a17, 1.52587890625e-05);
		a15.init(3.0517578115526096e-05, a16, 3.0517578125e-05);
		a14.init(6.103515617420877e-05, a15, 6.103515625e-05);
		a13.init(0.00012207031189367021, a14, 0.0001220703125);
		a12.init(0.00024414062014936177, a13, 0.000244140625);
		a11.init(0.0004882812111948983, a12, 0.00048828125);
		a10.init(0.0009765621895593195, a11, 0.0009765625);
		a9.init(0.0019531225164788188, a10, 0.001953125);
		a8.init(0.0039062301319669718, a9, 0.00390625);
		a7.init(0.007812341060101111, a8, 0.0078125);
		a6.init(0.015623728620476831, a7, 0.015625);
		a5.init(0.031239833430268277, a6, 0.03125);
		a4.init(0.06241880999595735, a5, 0.0625);
		a3.init(0.12435499454676144, a4, 0.125);
		a2.init(0.24497866312686414, a3, 0.25);
		a1.init(0.4636476090008061, a2, 0.5);
		a0.init(0.7853981633974483, a1, 1);

    
    epsilon= 0.5;
    X = 1.0;
    pi = 3.141592653589793238;
    nombre = -0.64;
    curr = aaa;
    if(nombre < 0.0){
        nombre = -nombre;
        signe = 1;
        X = 1.0;
        Y = nombre * signe;
        grosse_somme = -(pi / 2);
        res = X;
        X = Y;
        Y = -res;
        while((Y >= 0.0 && Y >= epsilon) || (Y <= 0.0 && Y <= epsilon)){
            curr = curr.suivant;
            if(Y > 0.0){
                signe2 = -1;
            }
            else{
                signe2 = 1;
            }
            angle_ajoute = signe2 * curr.contenu;
            grosse_somme = grosse_somme + angle_ajoute;
            res = X;
            X = X - (signe2 * (curr.valeur_k) * Y);
            Y = Y + (signe2 * (curr.valeur_k) * res);
        }
        println(grosse_somme * signe);
    }
    else if(nombre > 0.0){
        signe = 1;
        X = 1.0;
        Y = nombre;
        grosse_somme = -(pi / 2);
        res = X;
        X = Y;
        Y = -res;
        while((Y >= 0.0 && Y >= epsilon) || (Y <= 0.0 && Y <= epsilon)){
            curr = curr.suivant;

            if(Y > 0.0){
                signe2 = -1;
            }
            else{
                signe2 = 1;
            }
            angle_ajoute = signe2 * curr.contenu;
            grosse_somme = grosse_somme + angle_ajoute;
            res = X;
            X = X - (signe2 * (curr.valeur_k) * Y);
            Y = Y + (signe2 * (curr.valeur_k) * res);
        }
        println(grosse_somme * -signe);
    }
    else{
        println(0.0);
    }
}
